Figure 2. Implementing and reﬁning a loggingfeature using Aspectual Mixin Layers.
 Each Mixin Layer contains a set of Mixins and a set of aspects.  Doing so, Mixins imple- ment heterogeneous and hierarchy-conform crosscutting, whereas aspects express homogeneous and nonhierarchy- conform crosscutting.  In other words, Mixins reﬁne other Mixins and depend, therefore, on the structure of the parent layer.  These reﬁnements follow the static structure of the parent features and encapsulate heterogeneous crosscuts.  Aspects reﬁne a set of parent Mixins by intercepting method calls and executions as well as attribute accesses.  There- fore, aspects encapsulate homogeneous and non-hierarchy- conform reﬁnements.  Furthermore, they support advanced dynamic crosscutting.  Figure 2 shows a stack of Mixin Layers that implement some buffer functionality, in particular, a basic buffer with iterator, a separated allocator, synchronization, and logging support.  LogConsole LogConsole LogAspect LogAspect Buffer Buffer Buffer Iterator Iterator Allocator Allocator Lock ExtLog Log Sync Alloc Base ¾ ¾ . . . Figure 2. Implementing and reﬁning a logging feature using Aspectual Mixin Layers. Whereas the ﬁrst three features are implemented as com- mon Mixin Layers, the Logging feature is implemented as an Aspectual Mixin Layer.  It consists of a logging aspect and a logging console.  The logging console prints out the logging stream and is implemented using a common Mixin.  The logging aspect captures a whole set of methods that will be reﬁned with logging code (dotted arrows).  This re- ﬁnement is homogeneous, non-hierarchy-conform, and de- pends on the runtime control ﬂow (dynamic crosscutting). 

